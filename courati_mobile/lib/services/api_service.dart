import 'dart:convert';
import 'package:http/http.dart' as http;
import '../core/constants/api_endpoints.dart';
import '../data/models/auth_response_model.dart';
import '../data/models/level_model.dart';
import '../data/models/major_model.dart';
import 'auth_interceptor.dart';
import '../data/models/registration_choices_model.dart';

class ApiService {
  static const Map<String, String> _headers = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  };

  static Map<String, String> _authHeaders(String token) {
    return {
      ..._headers,
      'Authorization': 'Bearer $token',
    };
  }

  // ‚úÖ NOUVELLE M√âTHODE : Wrapper pour g√©rer les 401 automatiquement
  static Future<http.Response> _makeAuthenticatedRequest({
    required Future<http.Response> Function() request,
  }) async {
    try {
      final response = await request();
      
      // ‚úÖ D√©tecter les 401 Unauthorized
      if (response.statusCode == 401) {
        print('‚ùå 401 Unauthorized d√©tect√© - Session expir√©e');
        await AuthInterceptor.handle401Error();
        
        // Retourner une r√©ponse vide pour √©viter le crash
        return http.Response(
          jsonEncode({'error': 'Session expir√©e', 'success': false}), 
          401
        );
      }
      
      return response;
    } catch (e) {
      print('‚ùå Erreur requ√™te authentifi√©e: $e');
      rethrow;
    }
  }

  // ========================================
  // NOUVELLES M√âTHODES POUR LES CHOIX DYNAMIQUES
  // ========================================

  /// R√©cup√©rer tous les choix d'inscription (niveaux + fili√®res)
  static Future<RegistrationChoicesModel> getRegistrationChoices() async {
    print('R√©cup√©ration des choix d\'inscription');
    
    try {
      final response = await http.get(
        Uri.parse(ApiEndpoints.getRegistrationChoices),
        headers: _headers,
      );

      print('R√©ponse registration choices: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return RegistrationChoicesModel.fromJson(data);
      } else {
        throw Exception('Erreur r√©cup√©ration choix: ${response.statusCode}');
      }
    } catch (e) {
      print('Exception registration choices: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  /// R√©cup√©rer uniquement les niveaux
  static Future<List<LevelModel>> getLevels() async {
    print('R√©cup√©ration des niveaux');
    
    try {
      final response = await http.get(
        Uri.parse(ApiEndpoints.getLevels),
        headers: _headers,
      );

      print('R√©ponse levels: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return (data['levels'] as List)
            .map((level) => LevelModel.fromJson(level))
            .toList();
      } else {
        throw Exception('Erreur r√©cup√©ration niveaux: ${response.statusCode}');
      }
    } catch (e) {
      print('Exception levels: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  /// R√©cup√©rer uniquement les fili√®res (avec filtre d√©partement optionnel)
  static Future<List<MajorModel>> getMajors({String? department}) async {
    print('R√©cup√©ration des fili√®res${department != null ? ' pour $department' : ''}');
    
    try {
      String url = ApiEndpoints.getMajors;
      if (department != null && department.isNotEmpty) {
        url += '?department=$department';
      }

      final response = await http.get(
        Uri.parse(url),
        headers: _headers,
      );

      print('R√©ponse majors: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return (data['majors'] as List)
            .map((major) => MajorModel.fromJson(major))
            .toList();
      } else {
        throw Exception('Erreur r√©cup√©ration fili√®res: ${response.statusCode}');
      }
    } catch (e) {
      print('Exception majors: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  // ========================================
  // M√âTHODES EXISTANTES MODIFI√âES
  // ========================================

  /// Connexion utilisateur (supporte username, email ou t√©l√©phone)
  static Future<AuthResponseModel> login({
    required String username,
    required String password,
  }) async {
    print('Tentative de connexion pour: $username');
    
    try {
      final response = await http.post(
        Uri.parse(ApiEndpoints.login),
        headers: _headers,
        body: jsonEncode({
          'username': username,
          'password': password,
        }),
      );

      print('R√©ponse login: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return AuthResponseModel.fromJson(data);
      } else {
        final errorData = jsonDecode(response.body);
        throw Exception(errorData['error'] ?? 'Erreur de connexion: ${response.statusCode}');
      }
    } catch (e) {
      print('Exception login: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  /// Inscription utilisateur - MODIFI√â pour utiliser les IDs des niveaux/fili√®res
  static Future<Map<String, dynamic>> register({
  required String username,
  required String email,
  required String password,
  required String phoneNumber,
  required int levelId,      // CHANG√â: maintenant un ID
  required int majorId,      // CHANG√â: maintenant un ID
  String? firstName,
  String? lastName,
  }) async {
    print('Inscription pour: $username');
    
    try {
      final body = {
        'username': username,
        'email': email,
        'password': password,
        'phone_number': phoneNumber,
        'level': levelId,        // CHANG√â: envoyer l'ID
        'major': majorId,        // CHANG√â: envoyer l'ID
      };

      if (firstName != null && firstName.isNotEmpty) {
        body['first_name'] = firstName;
      }
      if (lastName != null && lastName.isNotEmpty) {
        body['last_name'] = lastName;
      }

      final response = await http.post(
        Uri.parse(ApiEndpoints.register),
        headers: _headers,
        body: jsonEncode(body),
      );

      print('R√©ponse register: ${response.statusCode}');
      
      if (response.statusCode == 201) {
        return jsonDecode(response.body);
      } else {
        final errorData = jsonDecode(response.body);
        throw Exception(errorData['error'] ?? 'Erreur inscription: ${response.statusCode}');
      }
    } catch (e) {
      print('Exception register: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  /// V√©rification de l'OTP envoy√© par email lors de l'inscription
  static Future<Map<String, dynamic>> verifyRegistrationOtp({
    required String email,
    required String otp,
  }) async {
    print('V√©rification OTP d\'inscription pour: $email');
    
    try {
      final response = await http.post(
        Uri.parse(ApiEndpoints.verifyOtp),
        headers: _headers,
        body: jsonEncode({
          'email': email,
          'otp': otp,
        }),
      );

      print('R√©ponse verify OTP: ${response.statusCode}');
      
      if (response.statusCode == 201) {
        final data = jsonDecode(response.body);
        return data;
      } else {
        final errorData = jsonDecode(response.body);
        throw Exception(errorData['error'] ?? 'Code OTP invalide');
      }
    } catch (e) {
      print('Exception verify OTP: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  /// Demande de r√©initialisation de mot de passe - envoie un OTP par email
  static Future<Map<String, dynamic>> requestPasswordReset({
    required String email,
  }) async {
    print('Demande de r√©initialisation pour: $email');
    
    try {
      final response = await http.post(
        Uri.parse(ApiEndpoints.passwordResetRequest),
        headers: _headers,
        body: jsonEncode({
          'email': email,
        }),
      );

      print('R√©ponse password reset request: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        final errorData = jsonDecode(response.body);
        throw Exception(errorData['error'] ?? 'Erreur demande r√©initialisation: ${response.statusCode}');
      }
    } catch (e) {
      print('Exception password reset request: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  /// Confirmation de r√©initialisation avec OTP email
  static Future<Map<String, dynamic>> confirmPasswordReset({
    required String email,
    required String otp,
    required String newPassword,
  }) async {
    print('Confirmation r√©initialisation pour: $email');
    
    try {
      final response = await http.post(
        Uri.parse(ApiEndpoints.passwordResetConfirm),
        headers: _headers,
        body: jsonEncode({
          'email': email,
          'otp': otp,
          'new_password': newPassword,
          'confirm_password': newPassword,
        }),
      );

      print('R√©ponse password reset confirm: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        final errorData = jsonDecode(response.body);
        throw Exception(errorData['error'] ?? 'Erreur confirmation r√©initialisation: ${response.statusCode}');
      }
    } catch (e) {
      print('Exception password reset confirm: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  /// R√©cup√©ration du profil utilisateur
static Future<Map<String, dynamic>> getUserProfile(String token) async {
  print('üìä R√©cup√©ration du profil utilisateur');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'user': null};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse(ApiEndpoints.profile),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse user profile: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'user': null};
    } else {
      throw Exception('Erreur r√©cup√©ration profil: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception user profile: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

  /// Mise √† jour du profil utilisateur
static Future<Map<String, dynamic>> updateUserProfile({
  required String token,
  Map<String, dynamic>? updates,
}) async {
  print('‚úèÔ∏è Mise √† jour du profil utilisateur');
  print('üìÑ Donn√©es √† envoyer: $updates');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.put(
        Uri.parse(ApiEndpoints.profile),
        headers: _authHeaders(validToken),
        body: jsonEncode(updates ?? {}),
      ),
    );

    print('üì± R√©ponse update profile: ${response.statusCode}');
    print('üìÑ R√©ponse body: ${response.body}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      print('‚ùå Erreur HTTP: ${response.statusCode}');
      print('üìÑ Body erreur: ${response.body}');
      
      try {
        final errorData = jsonDecode(response.body);
        String errorMessage = '';
        
        if (errorData.containsKey('details') && errorData['details'] is Map) {
          final details = errorData['details'] as Map<String, dynamic>;
          details.forEach((field, errors) {
            if (errors is List) {
              errorMessage += '$field: ${errors.join(', ')}\n';
            }
          });
        } else {
          errorMessage = errorData['error'] ?? 
                        errorData['detail'] ?? 
                        'Erreur mise √† jour profil: ${response.statusCode}';
        }
        
        throw Exception(errorMessage.trim());
      } catch (jsonError) {
        throw Exception('Erreur serveur: ${response.statusCode}');
      }
    }
  } catch (e) {
    print('‚ùå Exception update profile: $e');
    if (e.toString().contains('FormatException')) {
      throw Exception('Erreur de communication avec le serveur');
    }
    throw Exception('Erreur r√©seau: $e');
  }
}
  /// Changement de mot de passe (utilisateur connect√©)
static Future<Map<String, dynamic>> changePassword({
  required String token,
  required String currentPassword,
  required String newPassword,
}) async {
  print('üîí Changement de mot de passe');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.post(
        Uri.parse(ApiEndpoints.changePassword),
        headers: _authHeaders(validToken),
        body: jsonEncode({
          'current_password': currentPassword,
          'new_password': newPassword,
          'confirm_password': newPassword,
        }),
      ),
    );

    print('üì± R√©ponse change password: ${response.statusCode}');
    print('üìÑ R√©ponse body: ${response.body}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      print('‚ùå Erreur HTTP: ${response.statusCode}');
      print('üìÑ Body erreur: ${response.body}');
      
      try {
        final errorData = jsonDecode(response.body);
        String errorMessage = '';
        
        if (errorData.containsKey('error')) {
          errorMessage = errorData['error'];
        } else if (errorData.containsKey('current_password')) {
          errorMessage = 'Mot de passe actuel incorrect';
        } else if (errorData.containsKey('new_password')) {
          errorMessage = errorData['new_password'].join(', ');
        } else {
          errorMessage = 'Erreur lors du changement de mot de passe';
        }
        
        throw Exception(errorMessage);
      } catch (jsonError) {
        throw Exception('Erreur serveur: ${response.statusCode}');
      }
    }
  } catch (e) {
    print('‚ùå Exception change password: $e');
    if (e.toString().contains('FormatException')) {
      throw Exception('Erreur de communication avec le serveur');
    }
    throw Exception('Erreur r√©seau: $e');
  }
}

  /// Rafra√Æchissement du token JWT
  static Future<Map<String, dynamic>> refreshToken(String refreshToken) async {
    print('Rafra√Æchissement du token');
    
    try {
      final response = await http.post(
        Uri.parse(ApiEndpoints.tokenRefresh),
        headers: _headers,
        body: jsonEncode({
          'refresh': refreshToken,
        }),
      );

      print('R√©ponse token refresh: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Erreur rafra√Æchissement token: ${response.statusCode}');
      }
    } catch (e) {
      print('Exception token refresh: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  /// D√©connexion avec blacklist du refresh token
  static Future<Map<String, dynamic>> logout(String accessToken, String refreshToken) async {
    print('üö™ D√©connexion utilisateur');
    
    try {
      final response = await http.post(
        Uri.parse(ApiEndpoints.logout),
        headers: _authHeaders(accessToken),
        body: jsonEncode({
          'refresh': refreshToken,  // ‚úÖ AJOUT√â : Envoyer le refresh token
        }),
      );

      print('üì± R√©ponse logout: ${response.statusCode}');
      print('üìÑ Body: ${response.body}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Logout API r√©ussi');
        return {
          'success': true,
          'message': data['message'] ?? 'D√©connexion r√©ussie',
        };
      } else {
        print('‚ö†Ô∏è Logout API √©chou√©: ${response.statusCode}');
        // Retourner succ√®s quand m√™me car on va nettoyer localement
        return {
          'success': true,
          'message': 'D√©connexion locale effectu√©e',
          'warning': 'Erreur serveur: ${response.statusCode}',
        };
      }
    } catch (e) {
      print('‚ùå Exception logout: $e');
      // Retourner succ√®s pour permettre le nettoyage local
      return {
        'success': true,
        'message': 'D√©connexion locale effectu√©e',
        'warning': 'Erreur r√©seau: $e',
      };
    }
  }

  // ========================================
  // M√âTHODES COURSES
  // ========================================

  /// R√©cup√©rer les mati√®res de l'√©tudiant connect√©
  static Future<Map<String, dynamic>> getMySubjects(String token, {bool? featuredOnly}) async {
    print('R√©cup√©ration des mati√®res √©tudiantes');
    
    try {
      // ‚úÖ V√©rifier le token AVANT
      final validToken = await AuthInterceptor.getValidTokenOrRedirect();
      if (validToken == null) {
        return {'success': false, 'subjects': []};
      }
      
      String url = ApiEndpoints.mySubjects;
      if (featuredOnly != null) {
        url += '?featured=${featuredOnly.toString()}';
      }

      // ‚úÖ Utiliser le wrapper
      final response = await _makeAuthenticatedRequest(
        request: () => http.get(
          Uri.parse(url),
          headers: _authHeaders(validToken),
        ),
      );

      print('R√©ponse my subjects: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else if (response.statusCode == 401) {
        return {'success': false, 'subjects': []};
      } else {
        throw Exception('Erreur r√©cup√©ration mati√®res: ${response.statusCode}');
      }
    } catch (e) {
      print('Exception my subjects: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  /// R√©cup√©rer les documents d'une mati√®re
static Future<Map<String, dynamic>> getSubjectDocuments(String token, int subjectId, {String? type}) async {
  print('üìÑ R√©cup√©ration documents mati√®re $subjectId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'documents': []};
    }
    
    String url = ApiEndpoints.subjectDocuments(subjectId);
    if (type != null) {
      url += '?type=$type';
    }

    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse(url),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse subject documents: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'documents': []};
    } else {
      throw Exception('Erreur r√©cup√©ration documents: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception subject documents: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

  /// Page d'accueil personnalis√©e
  static Future<Map<String, dynamic>> getPersonalizedHome(String token) async {
    print('R√©cup√©ration page d\'accueil personnalis√©e');
    
    try {
      // ‚úÖ V√©rifier le token AVANT
      final validToken = await AuthInterceptor.getValidTokenOrRedirect();
      if (validToken == null) {
        return {'success': false, 'data': null};
      }
      
      // ‚úÖ Utiliser le wrapper
      final response = await _makeAuthenticatedRequest(
        request: () => http.get(
          Uri.parse(ApiEndpoints.personalizedHome),
          headers: _authHeaders(validToken),
        ),
      );

      print('R√©ponse personalized home: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else if (response.statusCode == 401) {
        return {'success': false, 'data': null};
      } else {
        throw Exception('Erreur r√©cup√©ration accueil: ${response.statusCode}');
      }
    } catch (e) {
      print('Exception personalized home: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  /// T√©l√©charger un document
static Future<Map<String, dynamic>?> downloadDocument(
  String accessToken, 
  int documentId
) async {
  try {
    print('üì• T√©l√©chargement document: $documentId');
    
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.post(
        Uri.parse('${ApiEndpoints.baseUrl}/api/courses/documents/$documentId/download/'),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse download: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      return {
        'success': false,
        'message': 'Erreur ${response.statusCode}',
      };
    }
  } catch (e) {
    print('‚ùå Exception download: $e');
    return {
      'success': false,
      'message': e.toString(),
    };
  }
}

 /// M√©thode pour obtenir l'URL de visualisation
static Future<Map<String, dynamic>?> getDocumentViewUrl(
  String accessToken, 
  int documentId
) async {
  try {
    print('üîó R√©cup√©ration URL document: $documentId');
    
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse('${ApiEndpoints.baseUrl}/api/courses/documents/$documentId/view/'),
        headers: {
          'Authorization': 'Bearer $validToken',
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      ),
    );

    print('üì± R√©ponse get view URL: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      print('‚úÖ URL r√©cup√©r√©e: ${data['view_url']}');
      return data;
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      print('‚ùå Erreur get view URL: ${response.statusCode} - ${response.body}');
      return {
        'success': false,
        'message': 'Erreur ${response.statusCode}',
      };
    }
  } catch (e) {
    print('‚ùå Exception get view URL: $e');
    return {
      'success': false,
      'message': e.toString(),
    };
  }
}

  // ========================================
  // M√âTHODES FAVORIS
  // ========================================

  /// Toggle favori g√©n√©ral (m√©thode principale)
  static Future<Map<String, dynamic>> toggleFavorite(String token, String type, int id) async {
    print('üîÑ Toggle favori $type $id');
    
    try {
      // ‚úÖ V√©rifier le token AVANT
      final validToken = await AuthInterceptor.getValidTokenOrRedirect();
      if (validToken == null) {
        return {'success': false, 'message': 'Token invalide'};
      }
      
      // ‚úÖ Utiliser le wrapper
      final response = await _makeAuthenticatedRequest(
        request: () => http.post(
          Uri.parse(ApiEndpoints.favorites),
          headers: _authHeaders(validToken),
          body: jsonEncode({
            'type': type, // 'SUBJECT' ou 'DOCUMENT'
            'id': id,
          }),
        ),
      );

      print('üì± R√©ponse toggle favorite: ${response.statusCode}');
      print('üìÑ Body: ${response.body}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return data;
      } else if (response.statusCode == 401) {
        return {'success': false, 'message': 'Token invalide'};
      } else {
        String errorMessage = 'Erreur gestion favori: ${response.statusCode}';
        try {
          final errorData = jsonDecode(response.body);
          errorMessage = errorData['error'] ?? errorMessage;
        } catch (e) {
          // Si le JSON de l'erreur ne peut pas √™tre pars√©, garder le message par d√©faut
        }
        throw Exception(errorMessage);
      }
    } catch (e) {
      print('‚ùå Exception toggle favorite: $e');
      
      if (e.toString().contains('SocketException') || e.toString().contains('TimeoutException')) {
        throw Exception('Probl√®me de connexion r√©seau. V√©rifiez votre connexion internet.');
      } else if (e.toString().contains('FormatException')) {
        throw Exception('Erreur de format de r√©ponse du serveur.');
      } else {
        throw Exception('Erreur r√©seau: $e');
      }
    }
  }

  /// R√©cup√©rer tous les favoris
  static Future<Map<String, dynamic>> getFavorites(String token) async {
    print('üì• R√©cup√©ration favoris');
    
    try {
      // ‚úÖ V√©rifier le token AVANT
      final validToken = await AuthInterceptor.getValidTokenOrRedirect();
      if (validToken == null) {
        return {'success': false, 'favorites': [], 'total_favorites': 0};
      }
      
      // ‚úÖ Utiliser le wrapper
      final response = await _makeAuthenticatedRequest(
        request: () => http.get(
          Uri.parse(ApiEndpoints.favorites),
          headers: _authHeaders(validToken),
        ),
      );

      print('üì± R√©ponse get favorites: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        print('‚úÖ Favoris r√©cup√©r√©s: ${data['total_favorites'] ?? 0} favoris');
        return data;
      } else if (response.statusCode == 401) {
        return {'success': false, 'favorites': [], 'total_favorites': 0};
      } else {
        String errorMessage = 'Erreur r√©cup√©ration favoris: ${response.statusCode}';
        try {
          final errorData = jsonDecode(response.body);
          errorMessage = errorData['error'] ?? errorMessage;
        } catch (e) {
          // Garder le message par d√©faut
        }
        throw Exception(errorMessage);
      }
    } catch (e) {
      print('‚ùå Exception get favorites: $e');
      
      if (e.toString().contains('SocketException') || e.toString().contains('TimeoutException')) {
        throw Exception('Probl√®me de connexion r√©seau. V√©rifiez votre connexion internet.');
      } else if (e.toString().contains('FormatException')) {
        throw Exception('Erreur de format de r√©ponse du serveur.');
      } else {
        throw Exception('Erreur r√©seau: $e');
      }
    }
  }

  /// Toggle favori pour un document sp√©cifique
  static Future<Map<String, dynamic>> toggleDocumentFavorite(String token, int documentId) async {
    print('üìÑ Toggle favori document $documentId');
    return await toggleFavorite(token, 'DOCUMENT', documentId);
  }



  // ========================================
  // M√âTHODES POUR L'HISTORIQUE
  // ========================================

  /// R√©cup√®re l'historique des activit√©s de l'utilisateur
static Future<Map<String, dynamic>> getHistory(String token) async {
  print('üìú R√©cup√©ration historique');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'history': []};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse('${ApiEndpoints.coursesBase}/history/'),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse history: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'history': []};
    } else {
      throw Exception('Erreur r√©cup√©ration historique: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception history: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

 

  // Ajouter ces m√©thodes dans votre ApiService existant

  // ========================================
  // M√âTHODES POUR L'HISTORIQUE DE CONSULTATION
  // ========================================

  /// R√©cup√®re l'historique des consultations de documents
  static Future<Map<String, dynamic>> getConsultationHistory(String token, {
    int? days,
    int? limit,
  }) async {
    print('üìñ R√©cup√©ration historique consultations');
    
    try {
      // ‚úÖ V√©rifier le token AVANT
      final validToken = await AuthInterceptor.getValidTokenOrRedirect();
      if (validToken == null) {
        return {'success': false, 'consultations': []};
      }
      
      String url = '${ApiEndpoints.coursesBase}/consultation-history/';
      
      List<String> queryParams = [];
      if (days != null) queryParams.add('days=$days');
      if (limit != null) queryParams.add('limit=$limit');
      
      if (queryParams.isNotEmpty) {
        url += '?${queryParams.join('&')}';
      }

      // ‚úÖ Utiliser le wrapper
      final response = await _makeAuthenticatedRequest(
        request: () => http.get(
          Uri.parse(url),
          headers: _authHeaders(validToken),
        ),
      );

      print('üì± R√©ponse consultation history: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return data;
      } else if (response.statusCode == 401) {
        return {'success': false, 'consultations': []};
      } else {
        throw Exception('Erreur r√©cup√©ration historique consultations: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Exception consultation history: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  /// Efface l'historique des consultations
  static Future<Map<String, dynamic>> clearConsultationHistory(String token) async {
    print('üóë Effacement historique consultations');
    
    try {
      // ‚úÖ V√©rifier le token AVANT
      final validToken = await AuthInterceptor.getValidTokenOrRedirect();
      if (validToken == null) {
        return {'success': false, 'message': 'Token invalide'};
      }
      
      // ‚úÖ Utiliser le wrapper
      final response = await _makeAuthenticatedRequest(
        request: () => http.delete(
          Uri.parse('${ApiEndpoints.coursesBase}/consultation-history/'),
          headers: _authHeaders(validToken),
        ),
      );

      print('üì± R√©ponse clear history: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return data;
      } else if (response.statusCode == 401) {
        return {'success': false, 'message': 'Token invalide'};
      } else {
        throw Exception('Erreur effacement historique: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Exception clear history: $e');
      throw Exception('Erreur r√©seau: $e');
    }
  }

  /// Marque un document comme consult√©
  static Future<Map<String, dynamic>?> markDocumentAsViewed(String token, int documentId) async {
    print('üëÅ Marquage consultation document $documentId');
    
    try {
      // ‚úÖ V√©rifier le token AVANT
      final validToken = await AuthInterceptor.getValidTokenOrRedirect();
      if (validToken == null) {
        return {'success': false, 'message': 'Token invalide'};
      }
      
      // ‚úÖ Utiliser le wrapper
      final response = await _makeAuthenticatedRequest(
        request: () => http.post(
          Uri.parse('${ApiEndpoints.coursesBase}/documents/$documentId/view/'),
          headers: _authHeaders(validToken),
          body: jsonEncode({
            'timestamp': DateTime.now().toIso8601String(),
            'action': 'view'
          }),
        ),
      );

      print('üì± R√©ponse mark viewed: ${response.statusCode}');
      
      if (response.statusCode == 200 || response.statusCode == 201) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'message': data['message'] ?? 'Document marqu√© comme consult√©',
        };
      } else if (response.statusCode == 401) {
        return {'success': false, 'message': 'Token invalide'};
      } else {
        return {'success': false, 'message': 'Erreur de marquage'};
      }
    } catch (e) {
      print('‚ùå Exception mark viewed: $e');
      return {'success': false, 'message': 'Erreur r√©seau'};
    }
  }

// ========================================
// M√âTHODES QUIZ
// ========================================

/// R√©cup√©rer la liste de tous les quiz disponibles pour l'√©tudiant
static Future<Map<String, dynamic>> getMyQuizzes(String token) async {
  print('üìù R√©cup√©ration de mes quiz');
  
  try {
    // ‚úÖ V√©rifier le token AVANT la requ√™te
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'quizzes': []};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse('${ApiEndpoints.coursesBase}/quizzes/my_quizzes/'),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse my quizzes: ${response.statusCode}');
    print('üìÑ Body brut: ${response.body}');
    
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      print('‚úÖ Data d√©cod√©: $data');
      return data;
    } else if (response.statusCode == 401) {
      // D√©j√† g√©r√© par le wrapper
      return {'success': false, 'quizzes': []};
    } else {
      throw Exception('Erreur r√©cup√©ration quiz: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception my quizzes: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// R√©cup√©rer les d√©tails d'un quiz sp√©cifique
static Future<Map<String, dynamic>> getQuizDetail(String token, int quizId) async {
  print('üìù R√©cup√©ration d√©tails quiz $quizId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'quiz': null};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse('${ApiEndpoints.coursesBase}/quizzes/$quizId/'),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse quiz detail: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'quiz': null};
    } else {
      throw Exception('Erreur r√©cup√©ration d√©tails quiz: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception quiz detail: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// D√©marrer une nouvelle tentative de quiz
static Future<Map<String, dynamic>> startQuiz(String token, int quizId) async {
  print('üöÄ D√©marrage quiz $quizId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.post(
        Uri.parse('${ApiEndpoints.coursesBase}/quizzes/$quizId/start/'),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse start quiz: ${response.statusCode}');
    print('üìÑ Body brut: ${response.body}');
    
    if (response.statusCode == 201 || response.statusCode == 200) {
      final data = jsonDecode(response.body);
      
      // D√âBOGAGE D√âTAILL√â
      print('‚úÖ Cl√©s re√ßues: ${data.keys.toList()}');
      print('‚úÖ Type attempt: ${data['attempt']?.runtimeType}');
      print('‚úÖ Type quiz: ${data['quiz']?.runtimeType}');
      
      if (data['quiz'] != null) {
        print('üìù Quiz data: ${data['quiz']}');
        print('üìù Questions: ${data['quiz']['questions']}');
      }
      
      return data;
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      final errorData = jsonDecode(response.body);
      throw Exception(errorData['error'] ?? 'Erreur d√©marrage quiz');
    }
  } catch (e, stackTrace) {
    print('‚ùå Exception start quiz: $e');
    print('‚ùå Stack trace: $stackTrace');
    rethrow;
  }
}

/// Soumettre les r√©ponses d'un quiz
static Future<Map<String, dynamic>> submitQuiz(
  String token, 
  int quizId, 
  int attemptId,
  List<Map<String, dynamic>> answers
) async {
  print('‚úÖ Soumission quiz $quizId, tentative $attemptId');
  print('üìÑ R√©ponses: ${answers.length} questions');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.post(
        Uri.parse('${ApiEndpoints.coursesBase}/quizzes/$quizId/submit/'),
        headers: _authHeaders(validToken),
        body: jsonEncode({
          'attempt_id': attemptId,
          'answers': answers,
        }),
      ),
    );

    print('üì± R√©ponse submit quiz: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      final errorData = jsonDecode(response.body);
      throw Exception(errorData['error'] ?? 'Erreur soumission quiz');
    }
  } catch (e) {
    print('‚ùå Exception submit quiz: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// R√©cup√©rer les r√©sultats de toutes les tentatives d'un quiz
static Future<Map<String, dynamic>> getQuizResults(String token, int quizId) async {
  print('üìä R√©cup√©ration r√©sultats quiz $quizId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'results': []};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse('${ApiEndpoints.coursesBase}/quizzes/$quizId/results/'),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse quiz results: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'results': []};
    } else {
      throw Exception('Erreur r√©cup√©ration r√©sultats: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception quiz results: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// R√©cup√©rer la correction d√©taill√©e d'une tentative
static Future<Map<String, dynamic>> getQuizCorrection(
  String token, 
  int quizId, 
  int attemptId
) async {
  print('üìñ R√©cup√©ration correction quiz $quizId, tentative $attemptId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'correction': null};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse('${ApiEndpoints.coursesBase}/quizzes/$quizId/correction/$attemptId/'),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse quiz correction: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'correction': null};
    } else if (response.statusCode == 403) {
      throw Exception('La correction n\'est pas disponible pour ce quiz');
    } else {
      throw Exception('Erreur r√©cup√©ration correction: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception quiz correction: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// Abandonner une tentative en cours
static Future<Map<String, dynamic>> abandonQuizAttempt(String token, int attemptId) async {
  print('üö´ Abandon tentative $attemptId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.post(
        Uri.parse('${ApiEndpoints.coursesBase}/attempts/$attemptId/abandon/'),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse abandon attempt: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      final errorData = jsonDecode(response.body);
      throw Exception(errorData['error'] ?? 'Erreur abandon tentative');
    }
  } catch (e) {
    print('‚ùå Exception abandon attempt: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// R√©cup√©rer toutes les tentatives de l'utilisateur
static Future<List<dynamic>> getMyAttempts(String token) async {
  print('üìã R√©cup√©ration de mes tentatives');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return [];
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse('${ApiEndpoints.coursesBase}/attempts/'),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse my attempts: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body) as List;
    } else if (response.statusCode == 401) {
      return [];
    } else {
      throw Exception('Erreur r√©cup√©ration tentatives: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception my attempts: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}



// ========================================
// M√âTHODES PROJETS
// ========================================

/// R√©cup√©rer tous les projets de l'√©tudiant
static Future<List<dynamic>> getMyProjects(String token) async {
  print('üìÇ R√©cup√©ration de mes projets');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return [];
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse(ApiEndpoints.myProjects),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse my projects: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      
      // ‚úÖ Retourner la liste directement
      if (data is List) {
        return data;
      } else {
        // Si c'est un objet avec des cl√©s, extraire la liste
        return data['results'] ?? data['data'] ?? [];
      }
    } else if (response.statusCode == 401) {
      return [];
    } else {
      throw Exception('Erreur r√©cup√©ration projets: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception my projects: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// Cr√©er un nouveau projet
static Future<Map<String, dynamic>> createProject(
  String token,
  Map<String, dynamic> projectData,
) async {
  print('‚ûï Cr√©ation projet');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.post(
        Uri.parse(ApiEndpoints.myProjects),
        headers: _authHeaders(validToken),
        body: jsonEncode(projectData),
      ),
    );

    print('üì± R√©ponse create project: ${response.statusCode}');
    
    if (response.statusCode == 201) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      final errorData = jsonDecode(response.body);
      throw Exception(errorData['error'] ?? 'Erreur cr√©ation projet');
    }
  } catch (e) {
    print('‚ùå Exception create project: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// R√©cup√©rer les d√©tails d'un projet
static Future<Map<String, dynamic>> getProjectDetail(String token, int projectId) async {
  print('üìÑ R√©cup√©ration d√©tails projet $projectId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'project': null};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse(ApiEndpoints.projectDetail(projectId)),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse project detail: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'project': null};
    } else {
      throw Exception('Erreur r√©cup√©ration d√©tails: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception project detail: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// Mettre √† jour un projet
static Future<Map<String, dynamic>> updateProject(
  String token,
  int projectId,
  Map<String, dynamic> updates,
) async {
  print('‚úèÔ∏è Mise √† jour projet $projectId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.patch(
        Uri.parse(ApiEndpoints.projectDetail(projectId)),
        headers: _authHeaders(validToken),
        body: jsonEncode(updates),
      ),
    );

    print('üì± R√©ponse update project: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      throw Exception('Erreur mise √† jour projet: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception update project: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// Supprimer un projet
static Future<void> deleteProject(String token, int projectId) async {
  print('üóë Suppression projet $projectId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      throw Exception('Token invalide');
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.delete(
        Uri.parse(ApiEndpoints.projectDetail(projectId)),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse delete project: ${response.statusCode}');
    
    if (response.statusCode != 204 && response.statusCode != 200 && response.statusCode != 401) {
      throw Exception('Erreur suppression projet: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception delete project: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// Toggle favori d'un projet
static Future<Map<String, dynamic>> toggleProjectFavorite(String token, int projectId) async {
  print('‚≠ê Toggle favori projet $projectId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.post(
        Uri.parse(ApiEndpoints.toggleProjectFavorite(projectId)),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse toggle favorite: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      throw Exception('Erreur toggle favori: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception toggle favorite: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// Archiver un projet
static Future<Map<String, dynamic>> archiveProject(String token, int projectId) async {
  print('üì¶ Archivage projet $projectId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.post(
        Uri.parse(ApiEndpoints.archiveProject(projectId)),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse archive: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      throw Exception('Erreur archivage: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception archive: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// D√©sarchiver un projet (en changeant le statut)
static Future<Map<String, dynamic>> unarchiveProject(String token, int projectId) async {
  print('üîì D√©sarchivage du projet $projectId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.patch(
        Uri.parse('${ApiEndpoints.baseUrl}/api/courses/projects/$projectId/'),
        headers: _authHeaders(validToken),
        body: jsonEncode({'status': 'IN_PROGRESS'}),
      ),
    );

    print('üì± R√©ponse unarchive: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      print('‚úÖ Projet d√©sarchiv√© avec succ√®s');
      return data;
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      print('‚ùå Erreur d√©sarchivage: ${response.statusCode}');
      throw Exception('Erreur d√©sarchivage projet: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception unarchive: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// Statistiques des projets
static Future<Map<String, dynamic>> getProjectStatistics(String token) async {
  print('üìä R√©cup√©ration statistiques projets');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'statistics': null};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse(ApiEndpoints.projectStatistics),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse statistics: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'statistics': null};
    } else {
      throw Exception('Erreur statistiques: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception statistics: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}



// ========================================
// M√âTHODES T√ÇCHES
// ========================================

/// R√©cup√©rer les t√¢ches d'un projet
static Future<List<dynamic>> getProjectTasks(String token, int projectId) async {
  print('‚úÖ R√©cup√©ration t√¢ches projet $projectId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return [];
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.get(
        Uri.parse(ApiEndpoints.tasksByProject(projectId)),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse tasks: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body) as List;
    } else if (response.statusCode == 401) {
      return [];
    } else {
      throw Exception('Erreur r√©cup√©ration t√¢ches: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception tasks: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// Cr√©er une nouvelle t√¢che
static Future<Map<String, dynamic>> createTask(
  String token,
  Map<String, dynamic> taskData,
) async {
  print('‚ûï Cr√©ation t√¢che');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.post(
        Uri.parse(ApiEndpoints.myTasks),
        headers: _authHeaders(validToken),
        body: jsonEncode(taskData),
      ),
    );

    print('üì± R√©ponse create task: ${response.statusCode}');
    
    if (response.statusCode == 201) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      throw Exception('Erreur cr√©ation t√¢che: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception create task: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// D√©placer une t√¢che (drag & drop)
static Future<Map<String, dynamic>> moveTask(
  String token,
  int taskId,
  String newStatus, {
  int? order,
}) async {
  print('üîÑ D√©placement t√¢che $taskId vers $newStatus');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.post(
        Uri.parse(ApiEndpoints.moveTask(taskId)),
        headers: _authHeaders(validToken),
        body: jsonEncode({
          'status': newStatus,
          if (order != null) 'order': order,
        }),
      ),
    );

    print('üì± R√©ponse move task: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      throw Exception('Erreur d√©placement t√¢che: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception move task: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// Mettre √† jour une t√¢che
static Future<Map<String, dynamic>> updateTask(
  String token,
  int taskId,
  Map<String, dynamic> updates,
) async {
  print('‚úèÔ∏è Mise √† jour t√¢che $taskId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.patch(
        Uri.parse(ApiEndpoints.taskDetail(taskId)),
        headers: _authHeaders(validToken),
        body: jsonEncode(updates),
      ),
    );

    print('üì± R√©ponse update task: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      throw Exception('Erreur mise √† jour t√¢che: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception update task: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// Supprimer une t√¢che
static Future<void> deleteTask(String token, int taskId) async {
  print('üóë Suppression t√¢che $taskId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      throw Exception('Token invalide');
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.delete(
        Uri.parse(ApiEndpoints.taskDetail(taskId)),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse delete task: ${response.statusCode}');
    
    if (response.statusCode != 204 && response.statusCode != 200 && response.statusCode != 401) {
      throw Exception('Erreur suppression t√¢che: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception delete task: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

/// Toggle importance d'une t√¢che
static Future<Map<String, dynamic>> toggleTaskImportant(String token, int taskId) async {
  print('‚ö†Ô∏è Toggle importance t√¢che $taskId');
  
  try {
    // ‚úÖ V√©rifier le token AVANT
    final validToken = await AuthInterceptor.getValidTokenOrRedirect();
    if (validToken == null) {
      return {'success': false, 'message': 'Token invalide'};
    }
    
    // ‚úÖ Utiliser le wrapper
    final response = await _makeAuthenticatedRequest(
      request: () => http.post(
        Uri.parse(ApiEndpoints.toggleTaskImportant(taskId)),
        headers: _authHeaders(validToken),
      ),
    );

    print('üì± R√©ponse toggle important: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else if (response.statusCode == 401) {
      return {'success': false, 'message': 'Token invalide'};
    } else {
      throw Exception('Erreur toggle importance: ${response.statusCode}');
    }
  } catch (e) {
    print('‚ùå Exception toggle important: $e');
    throw Exception('Erreur r√©seau: $e');
  }
}

}