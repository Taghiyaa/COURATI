// üìÅ lib/services/storage_service.dart
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'api_service.dart';

class StorageService {
  static late SharedPreferences _prefs;
  
  // ‚ú® NOUVEAU : Variables pour √©viter les race conditions
  static bool _isRefreshing = false;
  static DateTime? _lastRefreshTime;

  // Cl√©s de stockage
  static const String _accessTokenKey = 'access_token';
  static const String _refreshTokenKey = 'refresh_token';
  static const String _userDataKey = 'user_data';

  /// Initialiser le service de stockage (√† appeler au d√©marrage de l'app)
  static Future<void> init() async {
    _prefs = await SharedPreferences.getInstance();
    print('‚úÖ StorageService initialis√©');
  }

  /// Sauvegarder les tokens JWT
  static Future<void> saveTokens({
    required String accessToken,
    required String refreshToken,
  }) async {
    await _prefs.setString(_accessTokenKey, accessToken);
    await _prefs.setString(_refreshTokenKey, refreshToken);
    print('‚úÖ Tokens sauvegard√©s');
    print('   Access: ${accessToken.substring(0, 20)}...');
  }

  /// R√©cup√©rer le token d'acc√®s (sans v√©rification)
  static Future<String?> getAccessToken() async {
    final token = _prefs.getString(_accessTokenKey);
    if (token != null) {
      print('üìä Token r√©cup√©r√©: ${token.substring(0, 20)}...');
    } else {
      print('‚ö†Ô∏è  Aucun token trouv√©');
    }
    return token;
  }

  /// ‚ú® AM√âLIOR√â : R√©cup√©rer un token d'acc√®s VALIDE (avec refresh automatique + protection race conditions)
  static Future<String?> getValidAccessToken() async {
    String? accessToken = await getAccessToken();
    
    if (accessToken == null || accessToken.isEmpty) {
      print('‚ùå Aucun access token disponible');
      return null;
    }
    
    // ‚úÖ V√©rifier si le token est expir√©
    if (_isTokenExpired(accessToken)) {
      print('‚è∞ Token expir√©, tentative de refresh...');
      
      // ‚úÖ AM√âLIORATION 1 : V√©rifier si un refresh est d√©j√† en cours
      if (_isRefreshing) {
        print('‚è≥ Refresh d√©j√† en cours, attente...');
        
        // Attendre un peu et r√©essayer (max 5 secondes)
        for (int i = 0; i < 10; i++) {
          await Future.delayed(const Duration(milliseconds: 500));
          
          if (!_isRefreshing) {
            // Le refresh est termin√©, r√©cup√©rer le nouveau token
            final newToken = await getAccessToken();
            if (newToken != null && !_isTokenExpired(newToken)) {
              print('‚úÖ Token rafra√Æchi par un autre processus');
              return newToken;
            }
          }
        }
        
        print('‚ö†Ô∏è  Timeout en attendant le refresh');
        return null;
      }
      
      // ‚úÖ AM√âLIORATION 2 : V√©rifier si on a d√©j√† rafra√Æchi r√©cemment (< 30 secondes)
      if (_lastRefreshTime != null) {
        final timeSinceRefresh = DateTime.now().difference(_lastRefreshTime!);
        if (timeSinceRefresh.inSeconds < 30) {
          print('‚ö†Ô∏è  Refresh d√©j√† effectu√© il y a ${timeSinceRefresh.inSeconds}s');
          // R√©cup√©rer le token actuel au cas o√π
          final currentToken = await getAccessToken();
          if (currentToken != null && !_isTokenExpired(currentToken)) {
            return currentToken;
          }
        }
      }
      
      // Marquer qu'un refresh est en cours
      _isRefreshing = true;
      
      try {
        final refreshToken = await getRefreshToken();
        
        if (refreshToken != null && refreshToken.isNotEmpty) {
          final response = await ApiService.refreshToken(refreshToken);
          
          if (response['access'] != null) {
            final newAccessToken = response['access'] as String;
            
            // ‚úÖ AM√âLIORATION 3 : Sauvegarder aussi le nouveau refresh token si fourni
            if (response['refresh'] != null) {
              await saveTokens(
                accessToken: newAccessToken,
                refreshToken: response['refresh'] as String,
              );
              print('‚úÖ Token et refresh token mis √† jour');
            } else {
              await updateAccessToken(newAccessToken);
              print('‚úÖ Token mis √† jour (refresh token inchang√©)');
            }
            
            _lastRefreshTime = DateTime.now();
            print('‚úÖ Token rafra√Æchi avec succ√®s');
            
            return newAccessToken;
          } else {
            print('‚ùå R√©ponse refresh sans access token');
            await logout();
            return null;
          }
        } else {
          print('‚ùå Pas de refresh token disponible');
          await logout();
          return null;
        }
      } catch (e) {
        print('‚ùå Erreur refresh token: $e');
        // Token refresh expir√© ou invalide
        await logout();
        return null;
      } finally {
        // ‚úÖ AM√âLIORATION 4 : Toujours lib√©rer le lock
        _isRefreshing = false;
      }
    }
    
    print('‚úÖ Token encore valide');
    return accessToken;
  }

  /// ‚ú® AM√âLIOR√â : V√©rifier si un token JWT est expir√© ou expire bient√¥t
  static bool _isTokenExpired(String token) {
    try {
      // D√©coder le payload du JWT (format: header.payload.signature)
      final parts = token.split('.');
      if (parts.length != 3) {
        print('‚ö†Ô∏è  Format token invalide');
        return true;
      }
      
      // D√©coder la partie payload (base64)
      final payload = parts[1];
      
      // Normaliser le base64 (ajouter padding si n√©cessaire)
      String normalized = payload.replaceAll('-', '+').replaceAll('_', '/');
      while (normalized.length % 4 != 0) {
        normalized += '=';
      }
      
      final decoded = utf8.decode(base64.decode(normalized));
      final payloadMap = json.decode(decoded) as Map<String, dynamic>;
      
      if (payloadMap['exp'] == null) {
        print('‚ö†Ô∏è  Token sans date d\'expiration');
        return false;
      }
      
      // Convertir le timestamp Unix en DateTime
      final expiry = DateTime.fromMillisecondsSinceEpoch(
        (payloadMap['exp'] as int) * 1000,
      );
      
      final now = DateTime.now();
      final difference = expiry.difference(now);
      
      print('‚è±Ô∏è  Token expire dans: ${difference.inMinutes} minutes');
      
      // ‚úÖ AM√âLIORATION 5 : Augmenter la marge de s√©curit√© √† 10 minutes
      return difference.inMinutes < 10;
    } catch (e) {
      print('‚ùå Erreur d√©codage token: $e');
      return true;
    }
  }

  /// R√©cup√©rer le token de rafra√Æchissement
  static Future<String?> getRefreshToken() async {
    return _prefs.getString(_refreshTokenKey);
  }

  /// Sauvegarder les donn√©es utilisateur (JSON string)
  static Future<void> saveUserData(String userData) async {
    await _prefs.setString(_userDataKey, userData);
    print('‚úÖ Donn√©es utilisateur sauvegard√©es');
    print('   Data: ${userData.substring(0, 50)}...');
  }

  /// R√©cup√©rer les donn√©es utilisateur
  static Future<String?> getUserData() async {
    final userData = _prefs.getString(_userDataKey);
    if (userData != null) {
      print('üìä UserData r√©cup√©r√©: ${userData.substring(0, 50)}...');
    } else {
      print('‚ö†Ô∏è  Aucune donn√©e utilisateur trouv√©e');
    }
    return userData;
  }

  /// V√©rifier si l'utilisateur est connect√©
  static Future<bool> isLoggedIn() async {
    final accessToken = await getAccessToken();
    final userData = await getUserData();
    
    final isValid = accessToken != null && 
                    accessToken.isNotEmpty && 
                    userData != null && 
                    userData.isNotEmpty;
    
    print('üìä isLoggedIn: $isValid');
    print('   - Token pr√©sent: ${accessToken != null && accessToken.isNotEmpty}');
    print('   - UserData pr√©sent: ${userData != null && userData.isNotEmpty}');
    
    return isValid;
  }

  /// ‚ú® AM√âLIOR√â : D√©connexion - Nettoyer tout le stockage + r√©initialiser les variables
  static Future<void> logout() async {
    try {
      // R√©cup√©rer les tokens AVANT de les supprimer
      final accessToken = await getAccessToken();
      final refreshToken = await getRefreshToken();

      // Appeler l'API de logout si les deux tokens sont disponibles
      if (accessToken != null && accessToken.isNotEmpty &&
          refreshToken != null && refreshToken.isNotEmpty) {
        try {
          final result = await ApiService.logout(accessToken, refreshToken);
          
          if (result['success'] == true) {
            print('‚úÖ ${result['message']}');
            if (result['warning'] != null) {
              print('‚ö†Ô∏è ${result['warning']}');
            }
          }
        } catch (e) {
          print('‚ö†Ô∏è Erreur appel logout API (non bloquant): $e');
          // On continue quand m√™me pour nettoyer local
        }
      } else {
        print('‚ö†Ô∏è Tokens manquants, nettoyage local uniquement');
      }

      // ‚úÖ NETTOYER TOUT LE STOCKAGE dans tous les cas
      await _prefs.remove(_accessTokenKey);
      await _prefs.remove(_refreshTokenKey);
      await _prefs.remove(_userDataKey);
      
      // ‚úÖ R√©initialiser les variables de refresh
      _isRefreshing = false;
      _lastRefreshTime = null;
      
      print('‚úÖ Logout complet effectu√© - Tout le stockage nettoy√©');
      
      // V√©rifier que tout est bien supprim√©
      final checkToken = await getAccessToken();
      final checkData = await getUserData();
      print('üîç V√©rification post-logout:');
      print('   - Token: ${checkToken ?? "null"}');
      print('   - UserData: ${checkData ?? "null"}');
      
    } catch (e) {
      print('‚ùå Erreur logout: $e');
      // En cas d'erreur, forcer le nettoyage complet
      await _prefs.clear();
      _isRefreshing = false;
      _lastRefreshTime = null;
      print('‚úÖ Nettoyage forc√© effectu√©');
    }
  }

  /// Afficher les informations de stockage (debug)
  static Future<void> printStorageInfo() async {
    print('üìä === STORAGE INFO ===');
    final token = await getAccessToken();
    final refreshToken = await getRefreshToken();
    final userData = await getUserData();
    final isLogged = await isLoggedIn();
    
    print('   Access Token: ${token != null ? "${token.substring(0, 20)}..." : "null"}');
    print('   Refresh Token: ${refreshToken != null ? "${refreshToken.substring(0, 20)}..." : "null"}');
    print('   User Data: ${userData != null ? "${userData.substring(0, 50)}..." : "null"}');
    print('   Is Logged In: $isLogged');
    print('   Is Refreshing: $_isRefreshing');
    print('   Last Refresh: ${_lastRefreshTime?.toString() ?? "jamais"}');
    print('üìä ==================');
  }

  /// Mettre √† jour le token d'acc√®s (apr√®s refresh)
  static Future<void> updateAccessToken(String newAccessToken) async {
    await _prefs.setString(_accessTokenKey, newAccessToken);
    print('‚úÖ Token d\'acc√®s mis √† jour');
  }

  /// ‚ú® AM√âLIOR√â : Nettoyer compl√®tement le stockage (mode debug)
  static Future<void> clearAll() async {
    await _prefs.clear();
    _isRefreshing = false;
    _lastRefreshTime = null;
    print('üßπ Stockage compl√®tement nettoy√©');
  }
  
  /// ‚ú® BONUS : Forcer le refresh du token (utile pour les tests)
  static Future<String?> forceRefreshToken() async {
    print('üîÑ Force refresh du token...');
    
    final refreshToken = await getRefreshToken();
    if (refreshToken == null || refreshToken.isEmpty) {
      print('‚ùå Pas de refresh token disponible');
      return null;
    }
    
    _isRefreshing = true;
    
    try {
      final response = await ApiService.refreshToken(refreshToken);
      
      if (response['access'] != null) {
        final newAccessToken = response['access'] as String;
        
        if (response['refresh'] != null) {
          await saveTokens(
            accessToken: newAccessToken,
            refreshToken: response['refresh'] as String,
          );
        } else {
          await updateAccessToken(newAccessToken);
        }
        
        _lastRefreshTime = DateTime.now();
        print('‚úÖ Force refresh r√©ussi');
        
        return newAccessToken;
      }
      
      return null;
    } catch (e) {
      print('‚ùå Erreur force refresh: $e');
      return null;
    } finally {
      _isRefreshing = false;
    }
  }
  
  /// ‚ú® BONUS : Obtenir le temps restant avant expiration du token
  static Future<Duration?> getTokenTimeRemaining() async {
    final token = await getAccessToken();
    if (token == null) return null;
    
    try {
      final parts = token.split('.');
      if (parts.length != 3) return null;
      
      final payload = parts[1];
      String normalized = payload.replaceAll('-', '+').replaceAll('_', '/');
      while (normalized.length % 4 != 0) {
        normalized += '=';
      }
      
      final decoded = utf8.decode(base64.decode(normalized));
      final payloadMap = json.decode(decoded) as Map<String, dynamic>;
      
      if (payloadMap['exp'] == null) return null;
      
      final expiry = DateTime.fromMillisecondsSinceEpoch(
        (payloadMap['exp'] as int) * 1000,
      );
      
      return expiry.difference(DateTime.now());
    } catch (e) {
      print('‚ùå Erreur calcul temps restant: $e');
      return null;
    }
  }
}