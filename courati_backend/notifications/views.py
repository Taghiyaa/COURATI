# notifications/views.py
import logging
from rest_framework import status, permissions, generics
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import action
from django.shortcuts import get_object_or_404

from .models import FCMToken, NotificationPreference, SubjectPreference, NotificationHistory
from .serializers import (
    FCMTokenSerializer, 
    NotificationPreferenceSerializer,
    SubjectPreferenceSerializer,
    NotificationHistorySerializer
)
from courses.models import Subject

logger = logging.getLogger(__name__)


# ========================================
# GESTION DES TOKENS FCM
# ========================================

class FCMTokenRegisterView(APIView):
    """
    Enregistrer ou mettre √† jour un token FCM
    POST /api/notifications/fcm-token/
    Body: {"token": "xxx", "device_type": "android"}
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def post(self, request):
        user = request.user
        token = request.data.get('token')
        device_type = request.data.get('device_type', 'android')
        
        logger.info(f"üì± Enregistrement token FCM pour: {user.username}")
        
        if not token:
            return Response({
                'success': False,
                'error': 'Token FCM requis'
            }, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            # ‚úÖ CORRECTION : G√©rer le cas o√π le token existe d√©j√† pour un autre user
            
            # 1. Chercher si le token existe d√©j√†
            existing_token = FCMToken.objects.filter(token=token).first()
            
            if existing_token:
                # Le token existe d√©j√†
                if existing_token.user == user:
                    # ‚úÖ M√™me utilisateur : juste mettre √† jour
                    existing_token.device_type = device_type
                    existing_token.is_active = True
                    existing_token.save()
                    
                    logger.info(f"‚úÖ Token FCM mis √† jour pour {user.username}")
                    serializer = FCMTokenSerializer(existing_token)
                    
                    return Response({
                        'success': True,
                        'message': 'Token FCM mis √† jour avec succ√®s',
                        'token': serializer.data
                    }, status=status.HTTP_200_OK)
                else:
                    # ‚ö†Ô∏è Autre utilisateur : r√©assigner le token
                    logger.warning(f"‚ö†Ô∏è Token FCM transf√©r√© de {existing_token.user.username} √† {user.username}")
                    
                    existing_token.user = user
                    existing_token.device_type = device_type
                    existing_token.is_active = True
                    existing_token.save()
                    
                    serializer = FCMTokenSerializer(existing_token)
                    
                    return Response({
                        'success': True,
                        'message': 'Token FCM r√©assign√© avec succ√®s',
                        'token': serializer.data
                    }, status=status.HTTP_200_OK)
            else:
                # ‚úÖ Token n'existe pas : cr√©er un nouveau
                fcm_token = FCMToken.objects.create(
                    user=user,
                    token=token,
                    device_type=device_type,
                    is_active=True
                )
                
                logger.info(f"‚úÖ Token FCM cr√©√© pour {user.username}")
                serializer = FCMTokenSerializer(fcm_token)
                
                return Response({
                    'success': True,
                    'message': 'Token FCM cr√©√© avec succ√®s',
                    'token': serializer.data
                }, status=status.HTTP_201_CREATED)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur enregistrement token: {str(e)}")
            return Response({
                'success': False,
                'error': str(e)
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class FCMTokenDeleteView(APIView):
    """
    Supprimer un token FCM (d√©connexion, d√©sinstallation)
    DELETE /api/notifications/fcm-token/{token}/
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def delete(self, request, token):
        user = request.user
        
        try:
            fcm_token = FCMToken.objects.get(token=token, user=user)
            fcm_token.delete()
            
            logger.info(f"üóëÔ∏è Token FCM supprim√© pour {user.username}")
            
            return Response({
                'success': True,
                'message': 'Token supprim√© avec succ√®s'
            })
        
        except FCMToken.DoesNotExist:
            return Response({
                'success': False,
                'error': 'Token non trouv√©'
            }, status=status.HTTP_404_NOT_FOUND)


# ========================================
# GESTION DES PR√âF√âRENCES
# ========================================

class NotificationPreferenceView(APIView):
    """
    R√©cup√©rer et modifier les pr√©f√©rences de notifications
    GET /api/notifications/preferences/
    PUT /api/notifications/preferences/
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """R√©cup√©rer les pr√©f√©rences"""
        user = request.user
        
        # Cr√©er les pr√©f√©rences par d√©faut si elles n'existent pas
        preference, created = NotificationPreference.objects.get_or_create(
            user=user,
            defaults={
                'notifications_enabled': True,
                'new_content_enabled': True,
                'quiz_enabled': True,
                'deadline_reminders_enabled': True,
            }
        )
        
        serializer = NotificationPreferenceSerializer(preference)
        
        return Response({
            'success': True,
            'preferences': serializer.data
        })
    
    def put(self, request):
        """Modifier les pr√©f√©rences"""
        user = request.user
        
        preference, created = NotificationPreference.objects.get_or_create(user=user)
        
        serializer = NotificationPreferenceSerializer(
            preference, 
            data=request.data, 
            partial=True
        )
        
        if serializer.is_valid():
            serializer.save()
            
            logger.info(f"‚úèÔ∏è Pr√©f√©rences mises √† jour pour {user.username}")
            
            return Response({
                'success': True,
                'message': 'Pr√©f√©rences mises √† jour',
                'preferences': serializer.data
            })
        
        return Response({
            'success': False,
            'errors': serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


class SubjectPreferenceListView(APIView):
    """
    Liste des pr√©f√©rences par mati√®re
    GET /api/notifications/subject-preferences/
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        user = request.user
        
        # R√©cup√©rer toutes les mati√®res accessibles √† l'√©tudiant
        if user.is_student():
            try:
                student_profile = user.student_profile
                subjects = Subject.objects.filter(
                    levels=student_profile.level,
                    majors=student_profile.major,
                    is_active=True
                )
            except:
                subjects = Subject.objects.none()
        else:
            subjects = Subject.objects.filter(is_active=True)
        
        # Cr√©er les pr√©f√©rences manquantes
        for subject in subjects:
            SubjectPreference.objects.get_or_create(
                user=user,
                subject=subject,
                defaults={'notifications_enabled': True}
            )
        
        # R√©cup√©rer toutes les pr√©f√©rences
        preferences = SubjectPreference.objects.filter(
            user=user,
            subject__in=subjects
        ).select_related('subject')
        
        serializer = SubjectPreferenceSerializer(preferences, many=True)
        
        return Response({
            'success': True,
            'total': preferences.count(),
            'subject_preferences': serializer.data
        })


class SubjectPreferenceUpdateView(APIView):
    """
    Modifier une pr√©f√©rence de mati√®re
    PUT /api/notifications/subject-preferences/{id}/
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def put(self, request, pk):
        user = request.user
        
        preference = get_object_or_404(SubjectPreference, id=pk, user=user)
        
        serializer = SubjectPreferenceSerializer(
            preference,
            data=request.data,
            partial=True
        )
        
        if serializer.is_valid():
            serializer.save()
            
            logger.info(f"‚úèÔ∏è Pr√©f√©rence mati√®re mise √† jour: {preference.subject.code} pour {user.username}")
            
            return Response({
                'success': True,
                'message': 'Pr√©f√©rence mise √† jour',
                'preference': serializer.data
            })
        
        return Response({
            'success': False,
            'errors': serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)


# ========================================
# HISTORIQUE DES NOTIFICATIONS
# ========================================

class NotificationHistoryListView(APIView):
    """
    Liste des notifications re√ßues
    GET /api/notifications/history/
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        user = request.user
        
        # R√©cup√©rer les notifications des 30 derniers jours
        notifications = NotificationHistory.objects.filter(
            user=user
        ).order_by('-sent_at')[:100]
        
        serializer = NotificationHistorySerializer(notifications, many=True)
        
        # Statistiques
        unread_count = NotificationHistory.objects.filter(
            user=user,
            read=False
        ).count()
        
        return Response({
            'success': True,
            'total': notifications.count(),
            'unread_count': unread_count,
            'notifications': serializer.data
        })


class NotificationMarkAsReadView(APIView):
    """
    Marquer une notification comme lue
    PATCH /api/notifications/history/{id}/read/
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def patch(self, request, pk):
        user = request.user
        
        notification = get_object_or_404(
            NotificationHistory,
            id=pk,
            user=user
        )
        
        notification.read = True
        notification.save(update_fields=['read'])
        
        return Response({
            'success': True,
            'message': 'Notification marqu√©e comme lue'
        })


class NotificationMarkAllAsReadView(APIView):
    """
    Marquer toutes les notifications comme lues
    POST /api/notifications/history/mark-all-read/
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def post(self, request):
        user = request.user
        
        updated = NotificationHistory.objects.filter(
            user=user,
            read=False
        ).update(read=True)
        
        return Response({
            'success': True,
            'message': f'{updated} notifications marqu√©es comme lues'
        })